{
  "name": "oibackoff",
  "description": "Incremental backoff flow-control for any : fn(function(err, data) { ... });",
  "version": "0.3.0",
  "author": {
    "name": "Andrew Chilton",
    "email": "chilts@appsattic.com",
    "url": "http://www.chilts.org/"
  },
  "homepage": "https://github.com/appsattic/oibackoff",
  "contributors": [
    {
      "name": "Andrew Chilton",
      "email": "chilts@appsattic.com",
      "url": "http://www.chilts.org/"
    },
    {
      "name": "Daniel Stevens",
      "email": "daniel.stevens@senico.com",
      "url": "http://senico.com/"
    }
  ],
  "devDependencies": {
    "tap": ">= 0.2.5"
  },
  "dependencies": {
    "underscore": "~1.3.3"
  },
  "main": "oibackoff.js",
  "engines": {
    "node": ">= 0.6.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/appsattic/oibackoff.git"
  },
  "bugs": {
    "url": "http://github.com/appsattic/oibackoff/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "function",
    "backoff",
    "incremental",
    "exponentail",
    "linear",
    "control flow",
    "flow"
  ],
  "scripts": {
    "test": "tap test/"
  },
  "readme": "```\n          _______ _________ _       ______   _______  _______  _        _______  _______  _______ \n         (  ___  )\\__   __/( )     (  ___ \\ (  ___  )(  ____ \\| \\    /\\(  ___  )(  ____ \\(  ____ \\\n         | (   ) |   ) (   | |     | (   ) )| (   ) || (    \\/|  \\  / /| (   ) || (    \\/| (    \\/\n         | |   | |   | |   | |     | (__/ / | (___) || |      |  (_/ / | |   | || (__    | (__    \n         | |   | |   | |   | |     |  __ (  |  ___  || |      |   _ (  | |   | ||  __)   |  __)   \n         | |   | |   | |   (_)     | (  \\ \\ | (   ) || |      |  ( \\ \\ | |   | || (      | (      \n         | (___) |___) (___ _      | )___) )| )   ( || (____/\\|  /  \\ \\| (___) || )      | )      \n         (_______)\\_______/(_)     |/ \\___/ |/     \\|(_______/|_/    \\/(_______)|/       |/       \n                                                                                                  \n```\n\noibackoff - incremental backoff flow-control for any : fn(function(err, data) { ... });\n\n[![Build Status](https://secure.travis-ci.org/appsattic/oibackoff.png?branch=master)](http://travis-ci.org/appsattic/oibackoff)\n\n## Features ##\n\n* three different backoff algorithms: exponential, fibonacci and linear\n* max number of tries\n* max time to wait for any retry\n* scaling of the delay between tries\n\nYour code can stay the same plus you also get extra information about intermediate errors.\n\n## Examples ##\n\nOriginal code:\n\n```\nvar dns = require('dns');\n\n// original code\ndns.resolve('chilts.org', function(err, addresses) {\n    if (err) {\n        // do something to recover from this error\n        return;\n    }\n\n    // do something with addresses\n    console.log(addresses);\n});\n\n```\n\nUsing exponential backoff, with a maxium of 5 tries, with delays of 0.2, 0.4, 0.8, 1.6 and 3.2 seconds is fairly\nsimilar and you can reuse the 'backoff' function many times:\n\n```\nvar backoff = require('oibackoff').backoff({\n    algorithm  : 'exponential',\n    delayRatio : 0.2,\n    maxTries   : 5,\n});\n\nbackoff(dns.resolve, 'chilts.org', function(err, addresses, priorErrors) {\n    if (err) {\n        // do something to recover from this error\n        return;\n    }\n\n    // do something with addresses\n    console.log(addresses);\n});\n```\n\nYou can also provide an intermediate function which is called after each error. This method can be useful for logging\nor other operations between errors. By returning `false` you can cancel any additional tries.\n\n```\nvar intermediate = function(err, tries, delay) {\n    console.log(err);   // last error\n    console.log(tries); // total number of tries performed thus far\n    console.log(delay); // the delay for the next attempt\n    return false;       // this will cancel additional tries\n};\n\nbackoff(dns.resolve, 'chilts.org', intermediate, callback);\n```\n\nNotes:\n\n* 'err' contains the last error encountered (if maxTries was reached without success)\n* 'addresses' contrains the same as the original upon success, or null if all attempts failed\n* 'priorErrors' is informational and you may ignore it or use it to help you diagnose problems\n\n## Options ##\n\n### maxTries ###\n\nDefault: 3\n\nWill retry a maximum number of times. If you don't want a maxiumum, set this to 0.\n\n### delayRatio ###\n\nDefault : 1\n\nThis is the ratio for each delay between each try (in seconds).\n\nIf you choose the exponential algorithm, then 1s delayRatio will result in delays of 1, 2, 4, 8 etc\n\n### algorithm ###\n\nDefault : 'exponential'\n\nValid Values : exponential, incremental, fibonacci ;)\n\n### maxDelay ###\n\nNo Default.\n\nIf your chosen backoff strategy reaches a point which is above this number, then each succesive retry will top-out at\n'maxDelay' e.g. if you choose 'exponential', with a delayRatio of 1 and maxTries at 10, the retry delays will be 1, 2,\n4, 8, 10, 10, ... (instead of 1, 2, 4, 8, 16, 32, ...).\n\n## Example Backoff Stategies ##\n\n```\nvar oibackoff = require('oibackoff');\n\n// 0.4, 0.8, 1.6, 3.2, 6.4, ...\nvar backoff = oibackoff.backoff({\n    algorithm  : 'exponential',\n    delayRatio : 0.4,\n});\n\n// 1, 2, 3, 4, 5, ...\nvar backoff = oibackoff.backoff({\n    algorithm  : 'incremental',\n    delayRatio : 1,\n});\n\n// 0.5, 0.5, 1.0, 1.5, 2.5, 4, ...\nvar backoff = oibackoff.backoff({\n    algorithm  : 'fibonacci',\n    delayRatio : 0.5,\n});\n```\n\n## Author ##\n\nWritten by: [Andrew Chilton](http://chilts.org/) - [Blog](http://chilts.org/blog/) -\n[Twitter](https://twitter.com/andychilton).\n\nContributors:\n[Daniel Stevens - Senico](http://senico.com/)\n\n## License ##\n\nThe MIT License : http://opensource.org/licenses/MIT\n\nCopyright (c) 2011-2012 AppsAttic Ltd. http://appsattic.com/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the 'Software'), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n(Ends)\n",
  "readmeFilename": "README.md",
  "_id": "oibackoff@0.3.0",
  "_from": "oibackoff@"
}
